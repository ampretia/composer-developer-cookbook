{
	"name": "g11n-pipeline",
	"versions": {
		"1.1.0": {
			"name": "g11n-pipeline",
			"version": "1.1.0",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "index.js",
			"scripts": {
				"test": "mocha",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/client.js --template template-README.md > README.md"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"q": "^1.4.1",
				"chai": "^3.2.0",
				"jsdoc-to-markdown": "^1.2.1",
				"mocha": "^2.2.5",
				"optional": "^0.1.3"
			},
			"dependencies": {
				"swagger-client": "^2.1.3"
			},
			"gitHead": "6bc43032782e5d8390a9dbd5c160a62afab07d28",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@1.1.0",
			"_shasum": "fea53a2b3618faed3720eaa3e886c27e2d033700",
			"_from": ".",
			"_npmVersion": "3.3.12",
			"_nodeVersion": "5.1.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"shasum": "fea53a2b3618faed3720eaa3e886c27e2d033700",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.1.0.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"directories": {}
		},
		"1.1.1": {
			"name": "g11n-pipeline",
			"version": "1.1.1",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "index.js",
			"scripts": {
				"test": "mocha",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/client.js --template template-README.md > README.md"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"q": "^1.4.1",
				"chai": "^3.2.0",
				"jsdoc-to-markdown": "^1.2.1",
				"mocha": "^2.2.5",
				"optional": "^0.1.3"
			},
			"dependencies": {
				"swagger-client": "^2.1.3"
			},
			"gitHead": "9bbe2f748150c2da66752d387c9fb9f1c7392406",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@1.1.1",
			"_shasum": "cf7061c0085dd60354f20ed9e60bbd56949f50bb",
			"_from": ".",
			"_npmVersion": "3.3.12",
			"_nodeVersion": "5.1.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"shasum": "cf7061c0085dd60354f20ed9e60bbd56949f50bb",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.1.1.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"directories": {}
		},
		"1.1.2": {
			"name": "g11n-pipeline",
			"version": "1.1.2",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "index.js",
			"scripts": {
				"test": "mocha",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/client.js --template template-README.md > README.md"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"q": "^1.4.1",
				"chai": "^3.2.0",
				"jsdoc-to-markdown": "^1.2.1",
				"mocha": "^2.2.5",
				"optional": "^0.1.3"
			},
			"dependencies": {
				"swagger-client": "^2.1.3"
			},
			"gitHead": "2374ba0babfadd365cb4a359cf3f5510af180abf",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@1.1.2",
			"_shasum": "ba22b138e0e71ce672149a9bcce4dd4bc9025038",
			"_from": ".",
			"_npmVersion": "3.3.12",
			"_nodeVersion": "5.1.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"shasum": "ba22b138e0e71ce672149a9bcce4dd4bc9025038",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.1.2.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"directories": {}
		},
		"1.1.3": {
			"name": "g11n-pipeline",
			"version": "1.1.3",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "index.js",
			"scripts": {
				"test": "mocha",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/client.js --template template-README.md > README.md"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"q": "^1.4.1",
				"chai": "^3.2.0",
				"jsdoc-to-markdown": "^1.2.1",
				"mocha": "^2.2.5",
				"optional": "^0.1.3"
			},
			"dependencies": {
				"swagger-client": "^2.1.3"
			},
			"gitHead": "21cf43d2acbccd780460b114bb20c545ba2ed3e3",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@1.1.3",
			"_shasum": "ec5e4cd0bc26ec1c224cb5a1f01e553b591b12eb",
			"_from": ".",
			"_npmVersion": "3.3.12",
			"_nodeVersion": "5.1.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"shasum": "ec5e4cd0bc26ec1c224cb5a1f01e553b591b12eb",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.1.3.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"directories": {}
		},
		"1.1.4": {
			"name": "g11n-pipeline",
			"version": "1.1.4",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "index.js",
			"scripts": {
				"test": "mocha",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/client.js --template template-README.md > README.md",
				"html": "npm run docs ; node gen-html.js",
				"vscode-typings": "tsd query node mocha q chai request --action install",
				"coverage": "istanbul cover _mocha"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^3.2.0",
				"char-spinner": "^1.0.1",
				"github-markdown-css": "^2.2.0",
				"istanbul": "^0.4.1",
				"jsdoc-to-markdown": "^1.3.2",
				"marked": "^0.3.5",
				"mocha": "^2.2.5",
				"optional": "^0.1.3",
				"q": "^1.4.1",
				"request": "^2.67.0"
			},
			"dependencies": {
				"swagger-client": "^2.1.9"
			},
			"gitHead": "9854c7cab62e34b949335753477f7fd65b87ad64",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@1.1.4",
			"_shasum": "97eb2d6b256b54fd6fb69b0fe284172760179f39",
			"_from": ".",
			"_npmVersion": "3.3.12",
			"_nodeVersion": "5.1.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"shasum": "97eb2d6b256b54fd6fb69b0fe284172760179f39",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.1.4.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"directories": {}
		},
		"1.1.5": {
			"name": "g11n-pipeline",
			"version": "1.1.5",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "index.js",
			"scripts": {
				"test": "mocha",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/client.js --template template-README.md > README.md",
				"html": "npm run docs ; node gen-html.js",
				"vscode-typings": "tsd query node mocha q chai request --action install",
				"coverage": "istanbul cover _mocha"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^3.2.0",
				"char-spinner": "^1.0.1",
				"github-markdown-css": "^2.2.0",
				"istanbul": "^0.4.1",
				"jsdoc-to-markdown": "^1.3.3",
				"marked": "^0.3.5",
				"mocha": "^2.2.5",
				"optional": "^0.1.3",
				"q": "^1.4.1",
				"request": "^2.67.0"
			},
			"dependencies": {
				"swagger-client": ">2.1.11||<=2.1.10"
			},
			"gitHead": "7c3ac2fefb46b5b12db2d0233d42969510cffa1e",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@1.1.5",
			"_shasum": "8a62735a4b9b1fc2642903fe65daa711250122a5",
			"_from": ".",
			"_npmVersion": "3.3.12",
			"_nodeVersion": "5.5.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"shasum": "8a62735a4b9b1fc2642903fe65daa711250122a5",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.1.5.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "packages-8-eu.internal.npmjs.com",
				"tmp": "tmp/g11n-pipeline-1.1.5.tgz_1454371619471_0.320232508238405"
			},
			"directories": {}
		},
		"1.1.6": {
			"name": "g11n-pipeline",
			"version": "1.1.6",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "index.js",
			"scripts": {
				"test": "mocha",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/client.js --template template-README.md > README.md",
				"html": "npm run docs ; node gen-html.js",
				"vscode-typings": "tsd query node mocha q chai request --action install",
				"coverage": "istanbul cover _mocha"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^3.2.0",
				"char-spinner": "^1.0.1",
				"github-markdown-css": "^2.2.0",
				"istanbul": "^0.4.1",
				"jsdoc-to-markdown": "^1.3.3",
				"marked": "^0.3.5",
				"mocha": "^2.2.5",
				"optional": "^0.1.3",
				"q": "^1.4.1",
				"request": "^2.67.0"
			},
			"dependencies": {
				"swagger-client": ">2.1.11||<=2.1.10"
			},
			"gitHead": "a2b4f8c4f56cb617deb275a5001e70d5171e482b",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@1.1.6",
			"_shasum": "431097f10e5c9bf28c4ef690c140942c94a5ccf8",
			"_from": ".",
			"_npmVersion": "3.3.12",
			"_nodeVersion": "5.5.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"shasum": "431097f10e5c9bf28c4ef690c140942c94a5ccf8",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.1.6.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "packages-6-west.internal.npmjs.com",
				"tmp": "tmp/g11n-pipeline-1.1.6.tgz_1454373344524_0.6693576180841774"
			},
			"directories": {}
		},
		"1.2.0": {
			"name": "g11n-pipeline",
			"version": "1.2.0",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "index.js",
			"scripts": {
				"test": "mocha",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/client.js --template template-README.md > README.md",
				"html": "npm run docs ; node gen-html.js",
				"vscode-typings": "tsd query node mocha q chai request --action install",
				"coverage": "istanbul cover _mocha"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^3.2.0",
				"char-spinner": "^1.0.1",
				"github-markdown-css": "^2.2.0",
				"istanbul": "^0.4.1",
				"jsdoc-to-markdown": "^1.3.3",
				"marked": "^0.3.5",
				"mocha": "^2.2.5",
				"optional": "^0.1.3",
				"q": "^1.4.1",
				"request": "^2.67.0"
			},
			"dependencies": {
				"swagger-client": "^2.1.15"
			},
			"gitHead": "999b41dde3b742d2b49392ad17c186cef6f1df77",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@1.2.0",
			"_shasum": "653e07220ad7e89c868a7acf1745adbbc12d6764",
			"_from": ".",
			"_npmVersion": "3.8.9",
			"_nodeVersion": "6.2.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"shasum": "653e07220ad7e89c868a7acf1745adbbc12d6764",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.2.0.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "packages-12-west.internal.npmjs.com",
				"tmp": "tmp/g11n-pipeline-1.2.0.tgz_1468280044197_0.1885330609511584"
			},
			"directories": {}
		},
		"1.2.1-0": {
			"name": "g11n-pipeline",
			"version": "1.2.1-0",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "index.js",
			"scripts": {
				"test": "mocha",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/client.js --template template-README.md > README.md",
				"html": "npm run docs ; node gen-html.js",
				"vscode-typings": "tsd query node mocha q chai request --action install",
				"coverage": "istanbul cover _mocha"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^3.2.0",
				"char-spinner": "^1.0.1",
				"github-markdown-css": "^2.2.0",
				"istanbul": "^0.4.1",
				"jsdoc-to-markdown": "^1.3.3",
				"marked": "^0.3.5",
				"mocha": "^2.2.5",
				"optional": "^0.1.3",
				"q": "^1.4.1",
				"request": "^2.67.0"
			},
			"dependencies": {
				"swagger-client": "^2.1.15"
			},
			"gitHead": "04a1a9db4ee43659d3556bfc7d3f7310bedf842f",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@1.2.1-0",
			"_shasum": "d778fae5db0a81d29d9b56ced99df9492a0e69ff",
			"_from": ".",
			"_npmVersion": "3.8.9",
			"_nodeVersion": "6.2.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"shasum": "d778fae5db0a81d29d9b56ced99df9492a0e69ff",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.2.1-0.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "packages-12-west.internal.npmjs.com",
				"tmp": "tmp/g11n-pipeline-1.2.1-0.tgz_1468443374965_0.07514738920144737"
			},
			"directories": {}
		},
		"1.2.1": {
			"name": "g11n-pipeline",
			"version": "1.2.1",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "index.js",
			"scripts": {
				"test": "mocha",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/client.js --template template-README.md > README.md",
				"html": "npm run docs ; node gen-html.js",
				"vscode-typings": "tsd query node mocha q chai request --action install",
				"coverage": "istanbul cover _mocha"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^3.2.0",
				"char-spinner": "^1.0.1",
				"github-markdown-css": "^2.2.0",
				"istanbul": "^0.4.1",
				"jsdoc-to-markdown": "^1.3.3",
				"marked": "^0.3.5",
				"mocha": "^2.2.5",
				"optional": "^0.1.3",
				"q": "^1.4.1",
				"request": "^2.67.0"
			},
			"dependencies": {
				"swagger-client": "^2.1.15"
			},
			"gitHead": "4b1a88e67abcb781d4ff7cf64f5aa5e1d90da073",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@1.2.1",
			"_shasum": "a44687d37d9f61a352d6a1aecce1d463a38aaec9",
			"_from": ".",
			"_npmVersion": "3.8.9",
			"_nodeVersion": "6.2.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"shasum": "a44687d37d9f61a352d6a1aecce1d463a38aaec9",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.2.1.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "packages-12-west.internal.npmjs.com",
				"tmp": "tmp/g11n-pipeline-1.2.1.tgz_1469129645542_0.8779235095717013"
			},
			"directories": {}
		},
		"1.2.2": {
			"name": "g11n-pipeline",
			"version": "1.2.2",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "index.js",
			"scripts": {
				"test": "mocha",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/client.js --template template-README.md > README.md",
				"html": "npm run docs ; node gen-html.js",
				"vscode-typings": "tsd query node mocha q chai request --action install",
				"coverage": "istanbul cover _mocha"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^3.2.0",
				"char-spinner": "^1.0.1",
				"github-markdown-css": "^2.2.0",
				"istanbul": "^0.4.1",
				"jsdoc-to-markdown": "^1.3.3",
				"marked": "^0.3.5",
				"mocha": "^2.2.5",
				"optional": "^0.1.3",
				"q": "^1.4.1",
				"request": "^2.67.0"
			},
			"dependencies": {
				"swagger-client": "^2.1.16"
			},
			"gitHead": "9bf8bbc3f0193d819dda545337c046dfcc54c9fe",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@1.2.2",
			"_shasum": "f66827b8dc2f1180a4ab88bc03881984db990891",
			"_from": ".",
			"_npmVersion": "3.8.9",
			"_nodeVersion": "6.2.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"shasum": "f66827b8dc2f1180a4ab88bc03881984db990891",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.2.2.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "packages-12-west.internal.npmjs.com",
				"tmp": "tmp/g11n-pipeline-1.2.2.tgz_1469129887677_0.9379935236647725"
			},
			"directories": {}
		},
		"1.2.3": {
			"name": "g11n-pipeline",
			"version": "1.2.3",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "index.js",
			"scripts": {
				"test": "mocha",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/client.js --template template-README.md > README.md",
				"html": "npm run docs ; node gen-html.js",
				"vscode-typings": "tsd query node mocha q chai request --action install",
				"coverage": "istanbul cover _mocha"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^3.2.0",
				"char-spinner": "^1.0.1",
				"github-markdown-css": "^2.2.0",
				"istanbul": "^0.4.1",
				"jsdoc-to-markdown": "^1.3.3",
				"marked": "^0.3.5",
				"mocha": "^2.2.5",
				"optional": "^0.1.3",
				"q": "^1.4.1",
				"request": "^2.67.0"
			},
			"dependencies": {
				"swagger-client": "^2.1.16"
			},
			"gitHead": "c914bc3651109387246fe48f046088edb29fb719",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@1.2.3",
			"_shasum": "3a851e36962d3bda2c1e517c7fcd99983266c6ba",
			"_from": ".",
			"_npmVersion": "2.15.8",
			"_nodeVersion": "4.4.7",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"shasum": "3a851e36962d3bda2c1e517c7fcd99983266c6ba",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.2.3.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "packages-12-west.internal.npmjs.com",
				"tmp": "tmp/g11n-pipeline-1.2.3.tgz_1470784085714_0.7088100088294595"
			},
			"directories": {}
		},
		"1.3.0": {
			"name": "g11n-pipeline",
			"version": "1.3.0",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "index.js",
			"scripts": {
				"test": "mocha",
				"coverage": "nyc mocha && nyc report --reporter=lcov",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/client.js --template template-README.md > README.md",
				"html": "npm run docs ; node gen-html.js",
				"vscode-typings": "tsd query node mocha q chai request --action install"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^3.2.0",
				"char-spinner": "^1.0.1",
				"coveralls": "^2.11.12",
				"github-markdown-css": "^2.2.0",
				"istanbul": "^0.4.1",
				"jsdoc-to-markdown": "^2.0.1",
				"marked": "^0.3.5",
				"mocha": "^2.2.5",
				"nyc": "^8.1.0",
				"optional": "^0.1.3",
				"q": "^1.4.1",
				"request": "^2.67.0"
			},
			"dependencies": {
				"swagger-client": "^2.1.16"
			},
			"gitHead": "6ccb9a6fe62721c94d4ef3415a4fd5c28d3c6a00",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@1.3.0",
			"_shasum": "37a4389a0f366a3d8d583e3ea616221cf84f6979",
			"_from": ".",
			"_npmVersion": "3.10.8",
			"_nodeVersion": "7.0.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"shasum": "37a4389a0f366a3d8d583e3ea616221cf84f6979",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.3.0.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "packages-12-west.internal.npmjs.com",
				"tmp": "tmp/g11n-pipeline-1.3.0.tgz_1481071490373_0.7205225720535964"
			},
			"directories": {}
		},
		"1.4.0": {
			"name": "g11n-pipeline",
			"version": "1.4.0",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "index.js",
			"scripts": {
				"test": "mocha",
				"coverage": "nyc mocha && nyc report --reporter=lcov",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/client.js --template template-README.md > README.md",
				"html": "npm run docs ; node gen-html.js",
				"vscode-typings": "tsd query node mocha q chai request --action install"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^3.2.0",
				"char-spinner": "^1.0.1",
				"coveralls": "^2.11.12",
				"github-markdown-css": "^2.2.0",
				"istanbul": "^0.4.1",
				"jsdoc-to-markdown": "^2.0.1",
				"marked": "^0.3.5",
				"mocha": "^2.2.5",
				"nyc": "^8.1.0",
				"optional": "^0.1.3",
				"q": "^1.4.1",
				"request": "^2.67.0"
			},
			"dependencies": {
				"swagger-client": "^2.1.16"
			},
			"gitHead": "a4c61afeceaa24e1a92066c889b9a62a2ee08267",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@1.4.0",
			"_shasum": "1b58b849d9e5f2cf0bb5c99a45577cec67920e2c",
			"_from": ".",
			"_npmVersion": "4.0.5",
			"_nodeVersion": "7.4.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"shasum": "1b58b849d9e5f2cf0bb5c99a45577cec67920e2c",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.4.0.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "packages-18-east.internal.npmjs.com",
				"tmp": "tmp/g11n-pipeline-1.4.0.tgz_1490234347703_0.11320298328064382"
			},
			"directories": {}
		},
		"1.5.0": {
			"name": "g11n-pipeline",
			"version": "1.5.0",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "index.js",
			"engines": {
				"node": ">=0.12"
			},
			"scripts": {
				"test": "mocha",
				"coverage": "nyc mocha && nyc report --reporter=lcov",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/*.js --template template-README.md > README.md",
				"html": "npm run docs ; node gen-html.js",
				"vscode-typings": "tsd query node mocha q chai request --action install"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^4.1.0",
				"char-spinner": "^1.0.1",
				"coveralls": "^2.13.1",
				"github-markdown-css": "^2.8.0",
				"istanbul": "^0.4.5",
				"jsdoc-to-markdown": "^3.0.0",
				"marked": "^0.3.6",
				"mocha": "^3.4.2",
				"nyc": "^11.0.3",
				"optional": "^0.1.4",
				"q": "^1.5.0",
				"request": "^2.81.0"
			},
			"dependencies": {
				"swagger-client": "2.1.x"
			},
			"gitHead": "7f554f543805a2db866316480d117229bfbb1641",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@1.5.0",
			"_npmVersion": "5.3.0",
			"_nodeVersion": "8.2.1",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"integrity": "sha512-ucGIihx1Mii+i4dH8IdUCZdPH9PpaZ6rGXMI/6OihW1IqRJ4H7Io/v5thXoyllJxZgz35iRZdMDTUyxt/w81cQ==",
				"shasum": "fb20dc8fa60914ae6d2ea47190f1713cdb6cabbc",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.5.0.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/g11n-pipeline-1.5.0.tgz_1501706997951_0.42541195801459253"
			},
			"directories": {}
		},
		"1.5.1": {
			"name": "g11n-pipeline",
			"version": "1.5.1",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "index.js",
			"engines": {
				"node": ">=0.12"
			},
			"scripts": {
				"test": "mocha",
				"coverage": "nyc mocha && nyc report --reporter=lcov",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/*.js --template template-README.md > README.md",
				"html": "npm run docs ; node gen-html.js",
				"vscode-typings": "tsd query node mocha q chai request --action install"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^4.1.0",
				"char-spinner": "^1.0.1",
				"coveralls": "^2.13.1",
				"github-markdown-css": "^2.8.0",
				"istanbul": "^0.4.5",
				"jsdoc-to-markdown": "^3.0.0",
				"marked": "^0.3.6",
				"mocha": "^3.4.2",
				"nyc": "^11.0.3",
				"optional": "^0.1.4",
				"q": "^1.5.0",
				"request": "^2.81.0"
			},
			"dependencies": {
				"swagger-client": "2.1.x"
			},
			"gitHead": "60fff718a82b318eb7be7a8a3fe51b85ceb58d5b",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@1.5.1",
			"_npmVersion": "5.3.0",
			"_nodeVersion": "8.1.4",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"integrity": "sha512-7Me1Fz7Um0h8OXBEOQfUFEssH9kiUOBBnYjXmKqey6K0SVHfVOdZNitwKG8F6z0i4e9ZFVH4O4Cq/GAXBHOZTQ==",
				"shasum": "d700e4821e03b2d53f9a300a1bdebd98cf6968b2",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.5.1.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/g11n-pipeline-1.5.1.tgz_1502144881120_0.6424446089658886"
			},
			"directories": {}
		},
		"2.0.0": {
			"name": "g11n-pipeline",
			"version": "2.0.0",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "lib/main.js",
			"engines": {
				"node": ">=4"
			},
			"scripts": {
				"test": "mocha",
				"coverage": "nyc mocha && nyc report --reporter=lcov",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/*.js --template template-README.md > README.md",
				"html": "npm run docs && node util/gen-html.js",
				"vscode-typings": "tsd query node mocha chai request --action install",
				"eslint": "mocha -f eslint --reporter list"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^4.1.1",
				"char-spinner": "^1.0.1",
				"coveralls": "^2.13.1",
				"diff": "^3.3.0",
				"eslint": "^4.5.0",
				"eslint-plugin-chai-friendly": "^0.4.0",
				"github-markdown-css": "^2.8.0",
				"istanbul": "^0.4.5",
				"jsdoc-to-markdown": "^3.0.0",
				"marked": "^0.3.6",
				"mocha": "^3.5.0",
				"mocha-eslint": "^4.1.0",
				"nyc": "^11.1.0",
				"optional": "^0.1.4",
				"request": "^2.81.0"
			},
			"dependencies": {
				"swagger-client": "^3.0.20"
			},
			"gitHead": "0c57daf1ff017d7a4f0e4cf7cfaa286f94ce8761",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@2.0.0",
			"_npmVersion": "5.3.0",
			"_nodeVersion": "8.4.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"integrity": "sha512-29169pnmL6Pbxj+NbhIFShiCKzuN/gA2DnUIiGhpCuD0nDV5xWidkGmJceXIZ0jBujLKgCs1D86BVZqSjrDqNw==",
				"shasum": "05529b5396615028c1b4c79a72c4e0a12692e5e3",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-2.0.0.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/g11n-pipeline-2.0.0.tgz_1504881125498_0.17971180099993944"
			},
			"directories": {}
		},
		"2.0.1": {
			"name": "g11n-pipeline",
			"version": "2.0.1",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "lib/main.js",
			"engines": {
				"node": ">=4"
			},
			"scripts": {
				"test": "mocha",
				"coverage": "nyc mocha && nyc report --reporter=lcov",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/*.js --template template-README.md > README.md",
				"html": "npm run docs && node util/gen-html.js",
				"vscode-typings": "tsd query node mocha chai request --action install",
				"eslint": "mocha -f eslint --reporter list",
				"prepack": "rm -f README.html"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^4.1.1",
				"char-spinner": "^1.0.1",
				"coveralls": "^2.13.1",
				"diff": "^3.3.0",
				"eslint": "^4.5.0",
				"eslint-plugin-chai-friendly": "^0.4.0",
				"github-markdown-css": "^2.8.0",
				"istanbul": "^0.4.5",
				"jsdoc-to-markdown": "^3.0.0",
				"marked": "^0.3.6",
				"mocha": "^3.5.0",
				"mocha-eslint": "^4.1.0",
				"nyc": "^11.1.0",
				"optional": "^0.1.4",
				"request": "^2.81.0"
			},
			"dependencies": {
				"swagger-client": "^3.0.20"
			},
			"gitHead": "6e8937972f0e8bfe01108fdc4e55d4e3ced7dd10",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@2.0.1",
			"_npmVersion": "5.4.2",
			"_nodeVersion": "8.5.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"integrity": "sha512-7XOX8YcYNiOu8TAeQZvIt7UD6St9uLA7y6c4PVfo5zxbc/pec3dGmmjd6PcUF58HP0H8f2CpssMn7dqF7QAcqA==",
				"shasum": "d80a05b09eac806ddad28040524e7efc474cc6f1",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-2.0.1.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/g11n-pipeline-2.0.1.tgz_1507249745217_0.5574530514422804"
			},
			"directories": {}
		},
		"2.0.2": {
			"name": "g11n-pipeline",
			"version": "2.0.2",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "lib/main.js",
			"engines": {
				"node": ">=4"
			},
			"scripts": {
				"test": "mocha",
				"coverage": "nyc mocha && nyc report --reporter=lcov",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/*.js --template template-README.md > README.md",
				"html": "npm run docs && node util/gen-html.js",
				"vscode-typings": "tsd query node mocha chai request --action install",
				"eslint": "mocha -f eslint --reporter list",
				"prepack": "rm -f README.html"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^4.1.1",
				"char-spinner": "^1.0.1",
				"coveralls": "^2.13.1",
				"diff": "^3.3.0",
				"eslint": "^4.5.0",
				"eslint-plugin-chai-friendly": "^0.4.0",
				"github-markdown-css": "^2.8.0",
				"istanbul": "^0.4.5",
				"jsdoc-to-markdown": "^3.0.0",
				"marked": "^0.3.6",
				"mocha": "^3.5.0",
				"mocha-eslint": "^4.1.0",
				"nyc": "^11.1.0",
				"optional": "^0.1.4",
				"request": "^2.81.0"
			},
			"dependencies": {
				"swagger-client": "3.2.x"
			},
			"gitHead": "96a6c1880600ef576a797c1bb1429357147c7f97",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@2.0.2",
			"_npmVersion": "5.4.2",
			"_nodeVersion": "8.5.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"integrity": "sha512-dwcp0ib/tyb3rBaIOZRZxCNU9IdqG8JWLHEMBIS6Vx5Q6n3QXo1I4Y85tiLOKY5GEPaBANV7CPYmhWUj6OMKxw==",
				"shasum": "1ec78a2042402e1e52e373a29009a4231ed44540",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-2.0.2.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/g11n-pipeline-2.0.2.tgz_1509465599898_0.7711111200042069"
			},
			"directories": {}
		},
		"2.0.3": {
			"name": "g11n-pipeline",
			"version": "2.0.3",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "lib/main.js",
			"engines": {
				"node": ">=4"
			},
			"scripts": {
				"test": "mocha",
				"coverage": "nyc mocha && nyc report --reporter=lcov",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/*.js --template template-README.md > README.md",
				"html": "npm run docs && node util/gen-html.js",
				"vscode-typings": "tsd query node mocha chai request --action install",
				"eslint": "mocha -f eslint --reporter list",
				"prepack": "rm -f README.html"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^4.1.1",
				"char-spinner": "^1.0.1",
				"coveralls": "^2.13.1",
				"diff": "^3.3.0",
				"eslint": "^4.5.0",
				"eslint-plugin-chai-friendly": "^0.4.0",
				"github-markdown-css": "^2.8.0",
				"istanbul": "^0.4.5",
				"jsdoc-to-markdown": "^3.0.0",
				"marked": "^0.3.6",
				"mocha": "^3.5.0",
				"mocha-eslint": "^4.1.0",
				"nyc": "^11.1.0",
				"optional": "^0.1.4",
				"request": "^2.81.0"
			},
			"dependencies": {
				"swagger-client": "^3.3.1"
			},
			"gitHead": "00f2264552dae1c136a9add5f4d2a219840a7a1d",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@2.0.3",
			"_npmVersion": "5.5.1",
			"_nodeVersion": "8.5.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"integrity": "sha512-A+QtVlhWLFPnlI7di8SQ+HChJbBlUXCJZIMpfEKSspRGwcpTitZjwfe+Ywz6RE4H0oyCY/p8sGC0hP975rPIyg==",
				"shasum": "87707a78febe29511c7b7e6a2088edce3e3b5f97",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-2.0.3.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/g11n-pipeline-2.0.3.tgz_1509661157536_0.00007980968803167343"
			},
			"directories": {}
		},
		"2.0.4": {
			"name": "g11n-pipeline",
			"version": "2.0.4",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "lib/main.js",
			"engines": {
				"node": ">=4"
			},
			"scripts": {
				"test": "mocha",
				"coverage": "nyc mocha && nyc report --reporter=lcov",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/*.js --template template-README.md > README.md",
				"html": "npm run docs && node util/gen-html.js",
				"vscode-typings": "tsd query node mocha chai request --action install",
				"eslint": "mocha -f eslint --reporter list",
				"prepack": "rm -f README.html"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^4.1.1",
				"char-spinner": "^1.0.1",
				"coveralls": "^2.13.1",
				"diff": "^3.3.0",
				"eslint": "^4.5.0",
				"eslint-plugin-chai-friendly": "^0.4.0",
				"github-markdown-css": "^2.8.0",
				"istanbul": "^0.4.5",
				"jsdoc-to-markdown": "^3.0.0",
				"marked": "^0.3.6",
				"mocha": "^3.5.0",
				"mocha-eslint": "^4.1.0",
				"nyc": "^11.1.0",
				"optional": "^0.1.4",
				"request": "^2.81.0"
			},
			"dependencies": {
				"swagger-client": "^3.3.1"
			},
			"gitHead": "36f70a4cffcb922d09f5b1acf6e2c1bba324d4f2",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@2.0.4",
			"_npmVersion": "5.3.0",
			"_nodeVersion": "8.2.1",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"integrity": "sha512-qzrK8ZzMgfFDVacgaovTMoj7IjQrFGmPS7xQ6Z/vJ97NXYIh77r2992sKk2xPRy/BJsGCeXbQa/306auz4ayew==",
				"shasum": "e85850bb4560c5610eb6f4083cbab2d895ecafc3",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-2.0.4.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/g11n-pipeline-2.0.4.tgz_1509663198921_0.8998305525165051"
			},
			"directories": {}
		},
		"2.0.5": {
			"name": "g11n-pipeline",
			"version": "2.0.5",
			"description": "JavaScript (Node.js, etc) client for Bluemix Globalization Pipeline",
			"main": "lib/main.js",
			"engines": {
				"node": ">=4"
			},
			"scripts": {
				"test": "mocha",
				"coverage": "nyc mocha && nyc report --reporter=lcov",
				"mocha": "mocha --reporter dot",
				"docs": "jsdoc2md lib/*.js --template template-README.md > README.md",
				"html": "npm run docs && node util/gen-html.js",
				"vscode-typings": "tsd query node mocha chai request --action install",
				"eslint": "mocha -f eslint --reporter list",
				"prepack": "rm -f README.html"
			},
			"repository": {
				"type": "git",
				"url": "git+https://github.com/IBM-Bluemix/gp-js-client.git"
			},
			"keywords": [
				"l10n"
			],
			"Author": "Steven R. Loomis <srloomis@us.ibm.com>",
			"license": "Apache-2.0",
			"devDependencies": {
				"chai": "^4.1.1",
				"char-spinner": "^1.0.1",
				"coveralls": "^2.13.1",
				"diff": "^3.3.0",
				"eslint": "^4.5.0",
				"eslint-plugin-chai-friendly": "^0.4.0",
				"github-markdown-css": "^2.8.0",
				"istanbul": "^0.4.5",
				"jsdoc-to-markdown": "^3.0.0",
				"marked": "^0.3.6",
				"mocha": "^3.5.0",
				"mocha-eslint": "^4.1.0",
				"nyc": "^11.1.0",
				"optional": "^0.1.4",
				"request": "^2.81.0"
			},
			"dependencies": {
				"swagger-client": "^3.3.1"
			},
			"gitHead": "111a281e282650053985ce8c48864e88631b1d2e",
			"bugs": {
				"url": "https://github.com/IBM-Bluemix/gp-js-client/issues"
			},
			"homepage": "https://github.com/IBM-Bluemix/gp-js-client#readme",
			"_id": "g11n-pipeline@2.0.5",
			"_npmVersion": "5.6.0",
			"_nodeVersion": "8.5.0",
			"_npmUser": {
				"name": "srl",
				"email": "srl@icu-project.org"
			},
			"dist": {
				"integrity": "sha512-q6xEVVF8PBzq740DQCiv6AqtdECAhHuJqsARwZRKtlAkywxpNPCWqAN+a41XSP0HQNm3wjxBb5WByw09BJ/sng==",
				"shasum": "4b21467f5f3b369d26df2f01d92f2153e0334125",
				"tarball": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-2.0.5.tgz"
			},
			"maintainers": [
				{
					"name": "srl",
					"email": "srl@icu-project.org"
				}
			],
			"_npmOperationalInternal": {
				"host": "s3://npm-registry-packages",
				"tmp": "tmp/g11n-pipeline-2.0.5.tgz_1515557997088_0.7454615612514317"
			},
			"directories": {}
		}
	},
	"dist-tags": {
		"latest": "2.0.5"
	},
	"time": {
		"modified": "2018-01-10T04:19:57.228Z",
		"created": "2015-11-21T00:03:36.883Z",
		"1.1.0": "2015-11-21T00:03:36.883Z",
		"1.1.1": "2015-11-21T00:48:09.672Z",
		"1.1.2": "2015-11-21T01:09:15.040Z",
		"1.1.3": "2015-11-21T01:13:37.662Z",
		"1.1.4": "2016-01-14T19:13:57.890Z",
		"1.1.5": "2016-02-02T00:07:03.121Z",
		"1.1.6": "2016-02-02T00:35:45.191Z",
		"1.2.0": "2016-07-11T23:34:04.687Z",
		"1.2.1-0": "2016-07-13T20:56:15.406Z",
		"1.2.1": "2016-07-21T19:34:05.767Z",
		"1.2.2": "2016-07-21T19:38:07.888Z",
		"1.2.3": "2016-08-09T23:08:05.978Z",
		"1.3.0": "2016-12-07T00:44:50.613Z",
		"1.4.0": "2017-03-23T01:59:09.556Z",
		"1.5.0": "2017-08-02T20:49:59.262Z",
		"1.5.1": "2017-08-07T22:28:01.323Z",
		"2.0.0": "2017-09-08T14:32:06.839Z",
		"2.0.1": "2017-10-06T00:29:06.620Z",
		"2.0.2": "2017-10-31T15:59:59.977Z",
		"2.0.3": "2017-11-02T22:19:17.641Z",
		"2.0.4": "2017-11-02T22:53:19.058Z",
		"2.0.5": "2018-01-10T04:19:57.228Z"
	},
	"_distfiles": {
		"g11n-pipeline-1.1.0.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.1.0.tgz",
			"sha": "fea53a2b3618faed3720eaa3e886c27e2d033700",
			"registry": "npmjs"
		},
		"g11n-pipeline-1.1.1.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.1.1.tgz",
			"sha": "cf7061c0085dd60354f20ed9e60bbd56949f50bb",
			"registry": "npmjs"
		},
		"g11n-pipeline-1.1.2.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.1.2.tgz",
			"sha": "ba22b138e0e71ce672149a9bcce4dd4bc9025038",
			"registry": "npmjs"
		},
		"g11n-pipeline-1.1.3.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.1.3.tgz",
			"sha": "ec5e4cd0bc26ec1c224cb5a1f01e553b591b12eb",
			"registry": "npmjs"
		},
		"g11n-pipeline-1.1.4.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.1.4.tgz",
			"sha": "97eb2d6b256b54fd6fb69b0fe284172760179f39",
			"registry": "npmjs"
		},
		"g11n-pipeline-1.1.5.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.1.5.tgz",
			"sha": "8a62735a4b9b1fc2642903fe65daa711250122a5",
			"registry": "npmjs"
		},
		"g11n-pipeline-1.1.6.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.1.6.tgz",
			"sha": "431097f10e5c9bf28c4ef690c140942c94a5ccf8",
			"registry": "npmjs"
		},
		"g11n-pipeline-1.2.0.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.2.0.tgz",
			"sha": "653e07220ad7e89c868a7acf1745adbbc12d6764",
			"registry": "npmjs"
		},
		"g11n-pipeline-1.2.1-0.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.2.1-0.tgz",
			"sha": "d778fae5db0a81d29d9b56ced99df9492a0e69ff",
			"registry": "npmjs"
		},
		"g11n-pipeline-1.2.1.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.2.1.tgz",
			"sha": "a44687d37d9f61a352d6a1aecce1d463a38aaec9",
			"registry": "npmjs"
		},
		"g11n-pipeline-1.2.2.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.2.2.tgz",
			"sha": "f66827b8dc2f1180a4ab88bc03881984db990891",
			"registry": "npmjs"
		},
		"g11n-pipeline-1.2.3.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.2.3.tgz",
			"sha": "3a851e36962d3bda2c1e517c7fcd99983266c6ba",
			"registry": "npmjs"
		},
		"g11n-pipeline-1.3.0.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.3.0.tgz",
			"sha": "37a4389a0f366a3d8d583e3ea616221cf84f6979",
			"registry": "npmjs"
		},
		"g11n-pipeline-1.4.0.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.4.0.tgz",
			"sha": "1b58b849d9e5f2cf0bb5c99a45577cec67920e2c",
			"registry": "npmjs"
		},
		"g11n-pipeline-1.5.0.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.5.0.tgz",
			"sha": "fb20dc8fa60914ae6d2ea47190f1713cdb6cabbc",
			"registry": "npmjs"
		},
		"g11n-pipeline-1.5.1.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-1.5.1.tgz",
			"sha": "d700e4821e03b2d53f9a300a1bdebd98cf6968b2",
			"registry": "npmjs"
		},
		"g11n-pipeline-2.0.0.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-2.0.0.tgz",
			"sha": "05529b5396615028c1b4c79a72c4e0a12692e5e3",
			"registry": "npmjs"
		},
		"g11n-pipeline-2.0.1.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-2.0.1.tgz",
			"sha": "d80a05b09eac806ddad28040524e7efc474cc6f1",
			"registry": "npmjs"
		},
		"g11n-pipeline-2.0.2.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-2.0.2.tgz",
			"sha": "1ec78a2042402e1e52e373a29009a4231ed44540",
			"registry": "npmjs"
		},
		"g11n-pipeline-2.0.3.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-2.0.3.tgz",
			"sha": "87707a78febe29511c7b7e6a2088edce3e3b5f97",
			"registry": "npmjs"
		},
		"g11n-pipeline-2.0.4.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-2.0.4.tgz",
			"sha": "e85850bb4560c5610eb6f4083cbab2d895ecafc3",
			"registry": "npmjs"
		},
		"g11n-pipeline-2.0.5.tgz": {
			"url": "https://registry.npmjs.org/g11n-pipeline/-/g11n-pipeline-2.0.5.tgz",
			"sha": "4b21467f5f3b369d26df2f01d92f2153e0334125",
			"registry": "npmjs"
		}
	},
	"_attachments": {},
	"_uplinks": {
		"npmjs": {
			"etag": "\"5a55946d-158d2\"",
			"fetched": 1519837514948
		}
	},
	"_rev": "1-eac4846129e5fd9d",
	"readme": "Globalization Pipeline Client for JavaScript\n============================================\n\nThis is the JavaScript SDK for the\n[Globalization Pipeline](https://github.com/IBM-Bluemix/gp-common#globalization-pipeline)\nBluemix service. \nThe Globalization Pipeline service makes it easy for you to provide your global customers\nwith Bluemix applications translated into the languages in which they work. \nThis SDK currently supports:\n\n* [Node.js](http://nodejs.org)\n* Web Browsers via [Browserify](#browserify)\n\n[![npm version](https://badge.fury.io/js/g11n-pipeline.svg)](https://badge.fury.io/js/g11n-pipeline)\n[![Build Status](https://travis-ci.org/IBM-Bluemix/gp-js-client.svg?branch=master)](https://travis-ci.org/IBM-Bluemix/gp-js-client)\n[![Coverage Status](https://coveralls.io/repos/github/IBM-Bluemix/gp-js-client/badge.svg)](https://coveralls.io/github/IBM-Bluemix/gp-js-client)\n[![Coverity Status](https://img.shields.io/coverity/scan/9399.svg)](https://scan.coverity.com/projects/ibm-bluemix-gp-js-client)\n\n### News\n\n* ⚠ Please note that support for Node v0.12 [has been dropped in version 2.0 of this SDK](https://github.com/IBM-Bluemix/gp-js-client/issues/55). See the [Node.js LTS schedule](https://github.com/nodejs/LTS).\n\n## Sample\n\nFor a working Bluemix application sample,\nsee [gp-nodejs-sample](https://github.com/IBM-Bluemix/gp-nodejs-sample).\n\n## Quickstart\n\n* You should familiarize yourself with the service itself. A\ngood place to begin is by reading the\n[Quick Start Guide](https://github.com/IBM-Bluemix/gp-common#quick-start-guide)\nand the official\n[Getting Started with IBM Globalization ](https://www.ng.bluemix.net/docs/services/GlobalizationPipeline/index.html) documentation.\nThe documentation explains how to find the service on Bluemix, create a new service instance, create a new bundle, and access the translated messages.\n\n* Next, add `g11n-pipeline` to your project, as well as `cfenv` and `optional`.\n\n    npm install --save g11n-pipeline cfenv optional\n\n* Load the client object as follows (using [cfenv](https://www.npmjs.com/package/cfenv) ).\n\n```javascript\nvar optional = require('optional');\nvar appEnv = require('cfenv').getAppEnv();\nvar gpClient = require('g11n-pipeline').getClient(\n  optional('./local-credentials.json')   // if it exists, use local-credentials.json\n    || {appEnv: appEnv}                  // otherwise, the appEnv\n);\n```\n\n* For local testing, create a `local-credentials.json` file with the credentials\nas given in the bound service:\n\n      {\n        \"credentials\": {\n          \"url\": \"https://…\",\n          \"userId\": \"…\",\n          \"password\": \"……\",\n          \"instanceId\": \"………\"\n        }\n      }\n\n## Using\n\nTo fetch the strings for a bundle named \"hello\", first create a bundle accessor:\n\n```javascript\n    var mybundle = gpClient.bundle('hello');\n```\n\nThen, call the `getStrings` function with a callback:\n\n```javascript\n    mybundle.getStrings({ languageId: 'es'}, function (err, result) {\n        if (err) {\n            // handle err..\n            console.error(err);\n        } else {\n            var myStrings = result.resourceStrings;\n            console.dir(myStrings);\n        }\n    });\n```\n\nThis code snippet will output the translated strings such as the following:\n\n```javascript\n    {\n        hello:   '¡Hola!',\n        goodbye: '¡Adiós!',\n        …\n    }\n```\n\n### Translation Requests\n\nTo create a Translation request:\n\n```javascript\n    gpClient.tr({\n      name: 'My first TR',\n      domains: [ 'HEALTHC' ],\n\n      emails: ['my_real_email@me.example.com'],\n      partner: 'IBM',\n      targetLanguagesByBundle: {\n          bundle1: [ 'es', 'fr', 'de' ], // review bundle1’s Spanish, etc… \n          bundle2: [ 'zh-Hans' ]   // review bundle2’s Simplified Chinese…\n      },\n      notes: [ 'This is a mobile health advice application.' ],\n      status: 'SUBMITTED' // request to submit it right away.\n    })\n    .create((err, tr) => {\n        if(err) { … handle err … }\n\n        console.log('TR submitted with ID:', tr.id);\n        console.log('Estimated completion:', \n            tr.estimatedCompletion.toLocaleString());\n    });\n```\n\nTo then check on the status of that request:\n\n```javascript\n    gpClient.tr('333cfaecabdedbd8fa16a24b626848d6')\n    .getInfo((err, tr) => {\n        if(err) { … handle err … }\n\n        console.log('Current status:', tr.status);\n    });\n```\n\n### Async\n\nNote that all calls that take a callback are asynchronous.\nFor example, the following code:\n\n```javascript\nvar bundle = client.bundle('someBundle');\nbundle.create({…}, function(…){…});\nbundle.uploadStrings({…}, function(…){…});\n```\n\n…will fail, because the bundle `someBundle` hasn’t been `create`d by the time the\n`uploadStrings` call is made. Instead, make the `uploadStrings` call within a callback:\n\n```javascript\nvar bundle = client.bundle('someBundle');\nbundle.create({…}, function(…){\n    …\n    bundle.uploadStrings({…}, function(…){…});\n});\n```\n\n## Testing\n\nSee [TESTING.md](TESTING.md)\n\n## Browserify\n\nThe gp-js-client can be used in a web browser via [browserify](https://www.npmjs.com/package/browserify#example).\n\nYou can call the g11n-pipeline API just as from Node.js:\n```js\n// mycode.js\nconst gp = require('g11n-pipeline');\ngp.getClient({/*...*/}) // do some great stuff here\n```\n\nAnd then, package up the code for the browser:\n```\nnpm i --save g11n-pipeline\nnpm i -g browserify\nbrowserify mycode.js > bundle.js\n```\n\nFinally, include the bundle in your HTML:\n```html\n<script src=\"./bundle.js\"></script>\n```\n\n\nAPI convention\n==\n\nAPIs may take a callback OR return a promise, and use this general pattern\n\n### Promise mode\n\n* ⚠ _please note that the apidocs [haven’t been updated yet](https://github.com/IBM-Bluemix/gp-js-client/issues/85) to note that \nthe callback `cb` is optional and that Promises are returned by most functions.\n\n```javascript\n    gpClient.function( { /* opts */ })\n    .then( result => /* do something with result */)\n    .catch( err => /* do something with err */ );\n```\n\n\n* opts: an object containing input parameters, if needed.\n\n### Callback mode\n\nPrior to v2.0, only the callback model was supported. This is still supported.\n\n```javascript\n    gpClient.function( { /*opts*/ } ,  function callback(err, result))\n```\n\n* opts: an object containing input parameters, if needed.\n* callback: a callback with:\n    - `err`: if truthy, indicates an error has occured.\n    -`result`: the operation’s result\n\n\nSometimes the `opts` object is optional. If this is the case, the\nAPI doc will indicate it with this notation:  `[opts]`\nFor example,  `bundle.getInfo(cb)` and `bundle.getInfo({}, cb)`  are equivalent.\n\n\nAlso, note that there are aliases from the swagger doc function names\nto the convenience name. For example, `bundle.uploadResourceStrings` can be \nused in place of `bundle.uploadStrings`.\n\nAll language identifiers are [IETF BCP47](http://tools.ietf.org/html/bcp47) codes.\n\nAPI reference\n===\n\n## Classes\n\n<dl>\n<dt><a href=\"#Bundle\">Bundle</a></dt>\n<dd><p>Accessor object for a Globalization Pipeline bundle</p>\n</dd>\n<dt><a href=\"#Client\">Client</a></dt>\n<dd><p>Client object for Globalization Pipeline</p>\n</dd>\n<dt><a href=\"#ResourceEntry\">ResourceEntry</a></dt>\n<dd><p>Globalization Pipeline individual resource entry accessor</p>\n</dd>\n<dt><a href=\"#TranslationRequest\">TranslationRequest</a></dt>\n<dd></dd>\n<dt><a href=\"#User\">User</a></dt>\n<dd><p>Globalization Pipeline user access object</p>\n</dd>\n</dl>\n\n## Members\n\n<dl>\n<dt><a href=\"#serviceRegex\">serviceRegex</a></dt>\n<dd><p>a Regex for matching the service.\nUsage: <code>var credentials = require(&#39;cfEnv&#39;)\n     .getAppEnv().getServiceCreds(gp.serviceRegex);</code>\n(except that it needs to match by label)</p>\n</dd>\n<dt><a href=\"#exampleCredentials\">exampleCredentials</a></dt>\n<dd><p>Example credentials such as for documentation.</p>\n</dd>\n<dt><a href=\"#exampleCredentialsString\">exampleCredentialsString</a></dt>\n<dd><p>Example credentials string</p>\n</dd>\n<dt><a href=\"#version\">version</a></dt>\n<dd><p>Current version</p>\n</dd>\n</dl>\n\n## Functions\n\n<dl>\n<dt><a href=\"#getClient\">getClient(params)</a> ⇒ <code><a href=\"#Client\">Client</a></code></dt>\n<dd><p>Construct a g11n-pipeline client. \nparams.credentials is required unless params.appEnv is supplied.</p>\n</dd>\n</dl>\n\n## Typedefs\n\n<dl>\n<dt><a href=\"#ExternalService\">ExternalService</a> : <code>Object</code></dt>\n<dd><p>info about external services available</p>\n</dd>\n<dt><a href=\"#basicCallback\">basicCallback</a> : <code>function</code></dt>\n<dd><p>Basic Callback used throughout the SDK</p>\n</dd>\n<dt><a href=\"#WordCountsInfo\">WordCountsInfo</a> : <code>object</code></dt>\n<dd></dd>\n</dl>\n\n<a name=\"Bundle\"></a>\n\n## Bundle\nAccessor object for a Globalization Pipeline bundle\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| updatedBy | <code>string</code> | userid that updated this bundle |\n| updatedAt | <code>Date</code> | date when the bundle was last updated |\n| sourceLanguage | <code>string</code> | bcp47 id of the source language |\n| targetLanguages | <code>Array.&lt;string&gt;</code> | array of target langauge bcp47 ids |\n| readOnly | <code>boolean</code> | true if this bundle can only be read |\n| metadata | <code>Object.&lt;string, string&gt;</code> | array of user-editable metadata |\n\n\n* [Bundle](#Bundle)\n    * [new Bundle(gp, props)](#new_Bundle_new)\n    * _instance_\n        * [.getInfoFields](#Bundle+getInfoFields)\n        * [.delete([opts], cb)](#Bundle+delete)\n        * [.create(body, cb)](#Bundle+create)\n        * [.getInfo([opts], cb)](#Bundle+getInfo)\n        * [.languages()](#Bundle+languages) ⇒ <code>Array.&lt;String&gt;</code>\n        * [.getStrings(opts, cb)](#Bundle+getStrings)\n        * [.entry(opts)](#Bundle+entry)\n        * [.entries(opts, cb)](#Bundle+entries)\n        * [.uploadStrings(opts, cb)](#Bundle+uploadStrings)\n        * [.update(opts, cb)](#Bundle+update)\n        * [.updateStrings(opts, cb)](#Bundle+updateStrings)\n    * _inner_\n        * [~getInfoCallback](#Bundle..getInfoCallback) : <code>function</code>\n        * [~listEntriesCallback](#Bundle..listEntriesCallback) : <code>function</code>\n\n<a name=\"new_Bundle_new\"></a>\n\n### new Bundle(gp, props)\nNote: this constructor is not usually called directly, use Client.bundle(id)\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| gp | [<code>Client</code>](#Client) | parent g11n-pipeline client object |\n| props | <code>Object</code> | properties to inherit |\n\n<a name=\"Bundle+getInfoFields\"></a>\n\n### bundle.getInfoFields\nList of fields usable with Bundle.getInfo()\n\n**Kind**: instance property of [<code>Bundle</code>](#Bundle)  \n<a name=\"Bundle+delete\"></a>\n\n### bundle.delete([opts], cb)\nDelete this bundle.\n\n**Kind**: instance method of [<code>Bundle</code>](#Bundle)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>Object</code> | <code>{}</code> | options |\n| cb | [<code>basicCallback</code>](#basicCallback) |  |  |\n\n<a name=\"Bundle+create\"></a>\n\n### bundle.create(body, cb)\nCreate this bundle with the specified params.\nNote that on failure, such as an illegal language being specified,\nthe bundle is not created.\n\n**Kind**: instance method of [<code>Bundle</code>](#Bundle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| body | <code>Object</code> |  |\n| body.sourceLanguage | <code>string</code> | bcp47 id of source language such as 'en' |\n| body.targetLanguages | <code>Array</code> | optional array of target languages |\n| body.metadata | <code>Object</code> | optional metadata for the bundle |\n| body.partner | <code>string</code> | optional ID of partner assigned to translate this bundle |\n| body.notes | <code>Array.&lt;string&gt;</code> | optional note to translators |\n| cb | [<code>basicCallback</code>](#basicCallback) |  |\n\n<a name=\"Bundle+getInfo\"></a>\n\n### bundle.getInfo([opts], cb)\nGet bundle info. Returns a new Bundle object with additional fields populated.\n\n**Kind**: instance method of [<code>Bundle</code>](#Bundle)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>Object</code> | <code>{}</code> | Options object |\n| opts.fields | <code>String</code> |  | Comma separated list of fields |\n| opts.translationStatusMetricsByLanguage | <code>Boolean</code> |  | Optional field (false by default) |\n| opts.reviewStatusMetricsByLanguage | <code>Boolean</code> |  | Optional field (false by default) |\n| opts.partnerStatusMetricsByLanguage | <code>Boolean</code> |  | Optional field (false by default) |\n| cb | [<code>getInfoCallback</code>](#Bundle..getInfoCallback) |  | callback (err, Bundle ) |\n\n<a name=\"Bundle+languages\"></a>\n\n### bundle.languages() ⇒ <code>Array.&lt;String&gt;</code>\nReturn all of the languages (source and target) for this bundle.\nThe source language will be the first element.\nWill return undefined if this bundle was not returned by getInfo().\n\n**Kind**: instance method of [<code>Bundle</code>](#Bundle)  \n<a name=\"Bundle+getStrings\"></a>\n\n### bundle.getStrings(opts, cb)\nFetch one language's strings\n\n**Kind**: instance method of [<code>Bundle</code>](#Bundle)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| opts | <code>Object</code> |  | options |\n| opts.languageId | <code>String</code> |  | language to fetch |\n| [opts.fallback] | <code>boolean</code> | <code>false</code> | Whether if source language value is used if translated value is not available |\n| [opts.fields] | <code>string</code> |  | Optional fields separated by comma |\n| cb | [<code>basicCallback</code>](#basicCallback) |  | callback (err, { resourceStrings: { strings… } }) |\n\n<a name=\"Bundle+entry\"></a>\n\n### bundle.entry(opts)\nCreate an entry object. Doesn't fetch data,\n\n**Kind**: instance method of [<code>Bundle</code>](#Bundle)  \n**See**: ResourceEntry~getInfo  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>Object</code> | options |\n| opts.languageId | <code>String</code> | language |\n| opts.resourceKey | <code>String</code> | resource key |\n\n<a name=\"Bundle+entries\"></a>\n\n### bundle.entries(opts, cb)\nList entries. Callback is called with a map of \nresourceKey to ResourceEntry objects.\n\n**Kind**: instance method of [<code>Bundle</code>](#Bundle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>Object</code> | options |\n| opts.languageId | <code>String</code> | language to fetch |\n| cb | <code>listEntriesCallback</code> | Callback with (err, map of resourceKey:ResourceEntry ) |\n\n<a name=\"Bundle+uploadStrings\"></a>\n\n### bundle.uploadStrings(opts, cb)\nUpload resource strings, replacing all current contents for the language\n\n**Kind**: instance method of [<code>Bundle</code>](#Bundle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>Object</code> | options |\n| opts.languageId | <code>String</code> | language to update |\n| opts.strings | <code>Object.&lt;string, string&gt;</code> | strings to update |\n| cb | [<code>basicCallback</code>](#basicCallback) |  |\n\n<a name=\"Bundle+update\"></a>\n\n### bundle.update(opts, cb)\n**Kind**: instance method of [<code>Bundle</code>](#Bundle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>Object</code> | options |\n| opts.targetLanguages | <code>array</code> | optional: list of target languages to update |\n| opts.readOnly | <code>boolean</code> | optional: set this bundle to be readonly or not |\n| opts.metadata | <code>object</code> | optional: metadata to update |\n| opts.partner | <code>string</code> | optional: partner id to update |\n| opts.notes | <code>Array.&lt;string&gt;</code> | optional notes to translator |\n| cb | [<code>basicCallback</code>](#basicCallback) | callback |\n\n<a name=\"Bundle+updateStrings\"></a>\n\n### bundle.updateStrings(opts, cb)\nUpdate some strings in a language.\n\n**Kind**: instance method of [<code>Bundle</code>](#Bundle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>Object</code> | options |\n| opts.strings | <code>Object.&lt;string, string&gt;</code> | strings to update. |\n| opts.languageId | <code>String</code> | language to update |\n| opts.resync | <code>Boolean</code> | optional: If true, resynchronize strings  in the target language and resubmit previously-failing translation operations |\n| cb | [<code>basicCallback</code>](#basicCallback) |  |\n\n<a name=\"Bundle..getInfoCallback\"></a>\n\n### Bundle~getInfoCallback : <code>function</code>\nCallback returned by Bundle~getInfo().\n\n**Kind**: inner typedef of [<code>Bundle</code>](#Bundle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>object</code> | error, or null |\n| bundle | [<code>Bundle</code>](#Bundle) | bundle object with additional data |\n| bundle.updatedBy | <code>string</code> | userid that updated this bundle |\n| bundle.updatedAt | <code>Date</code> | date when the bundle was last updated |\n| bundle.sourceLanguage | <code>string</code> | bcp47 id of the source language |\n| bundle.targetLanguages | <code>Array.&lt;string&gt;</code> | array of target langauge bcp47 ids |\n| bundle.readOnly | <code>boolean</code> | true if this bundle can only be read |\n| bundle.metadata | <code>Object.&lt;string, string&gt;</code> | array of user-editable metadata |\n| bundle.translationStatusMetricsByLanguage | <code>Object</code> | additional metrics information |\n| bundle.reviewStatusMetricsByLanguage | <code>Object</code> | additional metrics information |\n\n<a name=\"Bundle..listEntriesCallback\"></a>\n\n### Bundle~listEntriesCallback : <code>function</code>\nCalled by entries()\n\n**Kind**: inner typedef of [<code>Bundle</code>](#Bundle)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>object</code> | error, or null |\n| entries | <code>Object.&lt;string, ResourceEntry&gt;</code> | map from resource key to ResourceEntry object.  The .value field will be filled in with the string value. |\n\n<a name=\"Client\"></a>\n\n## Client\nClient object for Globalization Pipeline\n\n**Kind**: global class  \n\n* [Client](#Client)\n    * _instance_\n        * [.version](#Client+version)\n        * [.url](#Client+url) ⇒ <code>String</code>\n        * [.supportedTranslations([opts], cb)](#Client+supportedTranslations)\n        * [.getServiceInfo([opts], cb)](#Client+getServiceInfo)\n        * [.getServiceInstanceInfo([opts], cb)](#Client+getServiceInstanceInfo)\n        * [.ping(args, cb)](#Client+ping)\n        * [.createUser(opts, cb)](#Client+createUser)\n        * [.user(id)](#Client+user) ⇒ [<code>User</code>](#User)\n        * [.users([opts], cb)](#Client+users)\n        * [.bundles([opts], cb)](#Client+bundles)\n        * [.bundle(opts)](#Client+bundle) ⇒ [<code>Bundle</code>](#Bundle)\n        * [.tr(opts)](#Client+tr) ⇒ [<code>TranslationRequest</code>](#TranslationRequest)\n        * [.trs([opts], cb)](#Client+trs)\n    * _inner_\n        * [~supportedTranslationsCallback](#Client..supportedTranslationsCallback) : <code>function</code>\n        * [~serviceInfoCallback](#Client..serviceInfoCallback) : <code>function</code>\n        * [~serviceInstanceInfoCallback](#Client..serviceInstanceInfoCallback) : <code>function</code>\n        * [~listUsersCallback](#Client..listUsersCallback) : <code>function</code>\n        * [~listBundlesCallback](#Client..listBundlesCallback) : <code>function</code>\n\n<a name=\"Client+version\"></a>\n\n### client.version\nVersion number of the REST service used. Currently ‘V2’.\n\n**Kind**: instance property of [<code>Client</code>](#Client)  \n<a name=\"Client+url\"></a>\n\n### client.url ⇒ <code>String</code>\nReturn the URL used for this client.\n\n**Kind**: instance property of [<code>Client</code>](#Client)  \n**Returns**: <code>String</code> - - the URL  \n<a name=\"Client+supportedTranslations\"></a>\n\n### client.supportedTranslations([opts], cb)\nThis function returns a map from source language(s) to target language(s).\nExample: `{ en: ['de', 'ja']}` meaning English translates to German and Japanese.\n\n**Kind**: instance method of [<code>Client</code>](#Client)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>object</code> | <code>{}</code> | ignored |\n| cb | [<code>supportedTranslationsCallback</code>](#Client..supportedTranslationsCallback) |  | (err, map-of-languages) |\n\n<a name=\"Client+getServiceInfo\"></a>\n\n### client.getServiceInfo([opts], cb)\nGet global information about this service, not specific to one service instance.\n\n**Kind**: instance method of [<code>Client</code>](#Client)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>object</code> | <code>{}</code> | ignored argument |\n| cb | [<code>serviceInfoCallback</code>](#Client..serviceInfoCallback) |  |  |\n\n<a name=\"Client+getServiceInstanceInfo\"></a>\n\n### client.getServiceInstanceInfo([opts], cb)\nGet information about our specific service instance.\n\n**Kind**: instance method of [<code>Client</code>](#Client)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>object</code> | <code>{}</code> | options |\n| [opts.serviceInstance] | <code>string</code> |  | request a specific service instance’s info |\n| cb | [<code>serviceInstanceInfoCallback</code>](#Client..serviceInstanceInfoCallback) |  |  |\n\n<a name=\"Client+ping\"></a>\n\n### client.ping(args, cb)\nVerify that there is access to the server. An error result\nwill be returned if there is a problem. On success, the data returned\ncan be ignored. (Note: this is a synonym for getServiceInfo())\n\n**Kind**: instance method of [<code>Client</code>](#Client)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| args | <code>object</code> | (ignored) |\n| cb | [<code>basicCallback</code>](#basicCallback) |  |\n\n<a name=\"Client+createUser\"></a>\n\n### client.createUser(opts, cb)\nCreate a user\n\n**Kind**: instance method of [<code>Client</code>](#Client)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>object</code> |  |\n| opts.type | <code>string</code> | User type (ADMINISTRATOR, TRANSLATOR, or READER) |\n| opts.displayName | <code>string</code> | Optional display name for the user.  This can be any string and is displayed in the service dashboard. |\n| opts.comment | <code>string</code> | Optional comment |\n| opts.bundles | <code>Array</code> | set of accessible bundle ids. Use `['*']` for “all bundles” |\n| opts.metadata | <code>Object.&lt;string, string&gt;</code> | optional key/value pairs for user metadata |\n| opts.externalId | <code>string</code> | optional external user ID for your application’s use |\n| cb | [<code>getUserCallback</code>](#User..getUserCallback) | passed a new User object |\n\n<a name=\"Client+user\"></a>\n\n### client.user(id) ⇒ [<code>User</code>](#User)\nCreate a user access object.\nThis doesn’t create the user itself,\nnor query the server, but is just a handle object.\nUse createUser() to create a user.\n\n**Kind**: instance method of [<code>Client</code>](#Client)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| id | <code>Object</code> | String (id) or map {id: bundleId, serviceInstance: serviceInstanceId} |\n\n<a name=\"Client+users\"></a>\n\n### client.users([opts], cb)\nList users. Callback is called with an array of \nuser access objects.\n\n**Kind**: instance method of [<code>Client</code>](#Client)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>Object</code> | <code>{}</code> | options |\n| cb | [<code>listUsersCallback</code>](#Client..listUsersCallback) |  | callback |\n\n<a name=\"Client+bundles\"></a>\n\n### client.bundles([opts], cb)\nList bundles. Callback is called with an map of \nbundle access objects.\n\n**Kind**: instance method of [<code>Client</code>](#Client)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>Object</code> | <code>{}</code> | options |\n| cb | [<code>listBundlesCallback</code>](#Client..listBundlesCallback) |  | given a map of Bundle objects |\n\n<a name=\"Client+bundle\"></a>\n\n### client.bundle(opts) ⇒ [<code>Bundle</code>](#Bundle)\nCreate a bundle access object.\nThis doesn’t create the bundle itself, just a handle object.\nCall create() on the bundle to create it.\n\n**Kind**: instance method of [<code>Client</code>](#Client)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>Object</code> | String (id) or map {id: bundleId, serviceInstance: serviceInstanceId} |\n\n<a name=\"Client+tr\"></a>\n\n### client.tr(opts) ⇒ [<code>TranslationRequest</code>](#TranslationRequest)\nCreate a Translation Request access object.\nThis doesn’t create the TR itself, just a handle object.\nCall create() on the translation request to create it.\n\n**Kind**: instance method of [<code>Client</code>](#Client)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>string</code> \\| <code>Object.&lt;string, Object&gt;</code> | Can be a string (id) or map with values (for a new TR). See TranslationRequest. |\n\n<a name=\"Client+trs\"></a>\n\n### client.trs([opts], cb)\nList Translation Requests. Callback is called with an map of \nTR access objects.\n\n**Kind**: instance method of [<code>Client</code>](#Client)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>Object</code> | <code>{}</code> | optional map of options |\n| cb | [<code>getTranslationRequestsCallback</code>](#TranslationRequest..getTranslationRequestsCallback) |  | callback yielding a map of Translation Requests |\n\n<a name=\"Client..supportedTranslationsCallback\"></a>\n\n### Client~supportedTranslationsCallback : <code>function</code>\nCallback returned by supportedTranslations()\n\n**Kind**: inner typedef of [<code>Client</code>](#Client)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>object</code> | error, or null |\n| languages | <code>Object.&lt;string, Array.&lt;string&gt;&gt;</code> | map from source language to array of target languages Example: `{ en: ['de', 'ja']}` meaning English translates to German and Japanese. |\n\n<a name=\"Client..serviceInfoCallback\"></a>\n\n### Client~serviceInfoCallback : <code>function</code>\nCallback used by getServiceInfo()\n\n**Kind**: inner typedef of [<code>Client</code>](#Client)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>object</code> | error, or null |\n| info | <code>Object</code> | detailed information about the service |\n| info.supportedTranslation | <code>Object.&lt;string, Array.&lt;string&gt;&gt;</code> | map from source language to array of target languages Example: `{ en: ['de', 'ja']}` meaning English translates to German and Japanese. |\n| info.supportedHumanTranslation | <code>Object.&lt;string, Array.&lt;string&gt;&gt;</code> | map from source language to array of target languages  supported for human translation. Example: `{ en: ['de', 'ja']}` meaning English translates to German and Japanese. |\n| info.externalServices | [<code>Array.&lt;ExternalService&gt;</code>](#ExternalService) | info about external services available |\n\n<a name=\"Client..serviceInstanceInfoCallback\"></a>\n\n### Client~serviceInstanceInfoCallback : <code>function</code>\nCallback returned by getServiceInstanceInfo()\n\n**Kind**: inner typedef of [<code>Client</code>](#Client)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>object</code> | error, or null |\n| instanceInfo | <code>object</code> | Additional information about the service instance |\n| instanceInfo.updatedBy | <code>string</code> | information about how our service instance was updated |\n| instanceInfo.updatedAt | <code>date</code> | when the instance was last updated |\n| instanceInfo.region | <code>string</code> | the Bluemix region name |\n| instanceInfo.cfServiceInstanceId | <code>string</code> | the CloudFoundry service instance ID |\n| instanceInfo.serviceId | <code>string</code> | this is equivalent to the service instance ID |\n| instanceInfo.orgId | <code>string</code> | this is the Bluemix organization ID |\n| instanceInfo.spaceId | <code>string</code> | this is the Bluemix space ID |\n| instanceInfo.planId | <code>string</code> | this is the Bluemix plan ID |\n| instanceInfo.htServiceEnabled | <code>boolean</code> | true if the Human Translation service is enabled |\n| instanceInfo.usage | <code>object</code> | usage information |\n| instanceInfo.usage.size | <code>number</code> | the size of resource data used by the Globalization Pipeline instance in bytes |\n| instanceInfo.disabled | <code>boolean</code> | true if this service has been set as disabled by Bluemix |\n\n<a name=\"Client..listUsersCallback\"></a>\n\n### Client~listUsersCallback : <code>function</code>\nCalled by users()\n\n**Kind**: inner typedef of [<code>Client</code>](#Client)  \n**See**: User  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>object</code> | error, or null |\n| users | <code>Object.&lt;string, User&gt;</code> | map from user ID to User object |\n\n<a name=\"Client..listBundlesCallback\"></a>\n\n### Client~listBundlesCallback : <code>function</code>\nBundle list callback\n\n**Kind**: inner typedef of [<code>Client</code>](#Client)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>object</code> | error, or null |\n| bundles | <code>Object.&lt;string, Bundle&gt;</code> | map from bundle ID to Bundle object |\n\n<a name=\"ResourceEntry\"></a>\n\n## ResourceEntry\nGlobalization Pipeline individual resource entry accessor\n\n**Kind**: global class  \n**See**: Bundle~entries  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| resourceKey | <code>String</code> | key for the resource |\n| updatedBy | <code>string</code> | the user which last updated this entry |\n| updatedAt | <code>Date</code> | when this entry was updated |\n| value | <code>string</code> | the translated value of this entry |\n| sourceValue | <code>string</code> | the source value of this entry |\n| reviewed | <code>boolean</code> | indicator of whether this entry has been reviewed |\n| translationStatus | <code>string</code> | status of this translation:  `source_language`, `translated`, `in_progress`, or `failed` |\n| entry.metadata | <code>Object.&lt;string, string&gt;</code> | user metadata for this entry |\n| partnerStatus | <code>string</code> | status of partner integration |\n| sequenceNumber | <code>number</code> | relative sequence of this entry |\n| notes | <code>Array.&lt;string&gt;</code> | optional notes to translator |\n\n\n* [ResourceEntry](#ResourceEntry)\n    * _instance_\n        * [.getInfo([opts], cb)](#ResourceEntry+getInfo)\n        * [.update()](#ResourceEntry+update)\n    * _inner_\n        * [~getInfoCallback](#ResourceEntry..getInfoCallback) : <code>function</code>\n\n<a name=\"ResourceEntry+getInfo\"></a>\n\n### resourceEntry.getInfo([opts], cb)\nLoad this entry's information. Callback is given\nanother ResourceEntry but one with all current data filled in.\n\n**Kind**: instance method of [<code>ResourceEntry</code>](#ResourceEntry)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>Object</code> | <code>{}</code> | options |\n| cb | [<code>getInfoCallback</code>](#ResourceEntry..getInfoCallback) |  | callback (err, ResourceEntry) |\n\n<a name=\"ResourceEntry+update\"></a>\n\n### resourceEntry.update()\nUpdate this resource entry's fields.\n\n**Kind**: instance method of [<code>ResourceEntry</code>](#ResourceEntry)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts.value | <code>string</code> | string value to update |\n| opts.reviewed | <code>boolean</code> | optional boolean indicating if value was reviewed |\n| opts.metadata | <code>object</code> | optional metadata to update |\n| opts.notes | <code>Array.&lt;string&gt;</code> | optional notes to translator |\n| opts.partnerStatus | <code>string</code> | translation status maintained by partner |\n| opts.sequenceNumber | <code>string</code> | sequence number of the entry (only for the source language) |\n\n<a name=\"ResourceEntry..getInfoCallback\"></a>\n\n### ResourceEntry~getInfoCallback : <code>function</code>\nCallback called by ResourceEntry~getInfo()\n\n**Kind**: inner typedef of [<code>ResourceEntry</code>](#ResourceEntry)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>object</code> | error, or null |\n| entry | [<code>ResourceEntry</code>](#ResourceEntry) | On success, the new or updated ResourceEntry object. |\n\n<a name=\"TranslationRequest\"></a>\n\n## TranslationRequest\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Default | Description |\n| --- | --- | --- | --- |\n| id | <code>string</code> |  | Translation Request ID |\n| serviceInstance | <code>string</code> |  | the Service Instance that this Translation Request belongs to |\n| partner | <code>string</code> |  | the three letter Partner ID to be used. Use 'IBM' for the Professional Plan |\n| name | <code>string</code> |  | descriptive title for this translation request |\n| targetLanguagesByBundle | <code>Object.&lt;String, Array.&lt;String&gt;&gt;</code> |  | map from Bundle ID to array of target languages |\n| emails | <code>Array.&lt;String&gt;</code> |  | array of email addresses for the requester |\n| domains | [<code>Array.&lt;TranslationDomain&gt;</code>](#TranslationDomain) |  | A list of applicable translation domains. |\n| status | [<code>TranslationRequestStatus</code>](#TranslationRequestStatus) |  | Status of this TR. |\n| wordCountsByBundle | <code>Object.&lt;String, WordCountsInfo&gt;</code> |  | map of bundle IDs to word count data |\n| updatedBy | <code>string</code> |  | last updated user ID |\n| updatedAt | <code>Date</code> |  | date when the TR was updated |\n| createdAt | <code>Date</code> |  | date when the TR was first submitted |\n| estimatedCompletion | <code>Date</code> |  | date when the TR is expected to be complete |\n| startedAt | <code>Date</code> |  | date when the TR was accepted for processing |\n| translatedAt | <code>Date</code> |  | date when the TR had completed translation review |\n| mergedAt | <code>Date</code> |  | date when the TR was merged back into the target bundles |\n| notes | <code>Array.&lt;String&gt;</code> | <code>[]</code> | optional array of notes to the translators |\n| metadata | <code>Object.&lt;string, string&gt;</code> |  | array of user-defined metadata |\n\n\n* [TranslationRequest](#TranslationRequest)\n    * [new TranslationRequest(gp, props)](#new_TranslationRequest_new)\n    * _instance_\n        * [.getInfo([opts], cb)](#TranslationRequest+getInfo)\n        * [.delete([opts], cb)](#TranslationRequest+delete)\n        * [.create([opts], cb)](#TranslationRequest+create)\n        * [.update(opts, cb)](#TranslationRequest+update)\n    * _inner_\n        * [~getTranslationRequestsCallback](#TranslationRequest..getTranslationRequestsCallback) : <code>function</code>\n        * [~getTranslationRequestCallback](#TranslationRequest..getTranslationRequestCallback) : <code>function</code>\n\n<a name=\"new_TranslationRequest_new\"></a>\n\n### new TranslationRequest(gp, props)\nThis class represents a request for professional editing of machine-translated content.\nNote: this constructor is not usually called directly, use Client.tr(id) or Client.tr({fields…})\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| gp | [<code>Client</code>](#Client) | parent g11n-pipeline client object |\n| props | <code>Object</code> | properties to inherit |\n\n<a name=\"TranslationRequest+getInfo\"></a>\n\n### translationRequest.getInfo([opts], cb)\nFetch the full record for this translation request.\nExample:  `client.tr('1dec633b').getInfo((err, tr) => { console.log(tr.status); });`\n\n**Kind**: instance method of [<code>TranslationRequest</code>](#TranslationRequest)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>Object</code> | <code>{}</code> | Options object - if present, overrides values in `this` |\n| cb | [<code>getTranslationRequestCallback</code>](#TranslationRequest..getTranslationRequestCallback) |  |  |\n\n<a name=\"TranslationRequest+delete\"></a>\n\n### translationRequest.delete([opts], cb)\nDelete this translation request.\n\n**Kind**: instance method of [<code>TranslationRequest</code>](#TranslationRequest)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>Object</code> | <code>{}</code> | Options object - if present, overrides values in `this` |\n| cb | <code>BasicCallBack</code> |  |  |\n\n<a name=\"TranslationRequest+create\"></a>\n\n### translationRequest.create([opts], cb)\nCreate a translation request with the specified options. The callback returns a new TranslationRequest object\nwith the `id` and other fields populated.\nExample:  `client.tr({ status: 'SUBMITTED', ... }).create((err, tr) => { console.log(tr.id); });`\n\n**Kind**: instance method of [<code>TranslationRequest</code>](#TranslationRequest)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>Object</code> | <code>{}</code> | Options object - if present, overrides values in `this` |\n| cb | [<code>getTranslationRequestCallback</code>](#TranslationRequest..getTranslationRequestCallback) |  |  |\n\n<a name=\"TranslationRequest+update\"></a>\n\n### translationRequest.update(opts, cb)\nUpdate a translation request with the specified values.\nIf any property of `opts` is missing, that value will not be updated.\n\n**Kind**: instance method of [<code>TranslationRequest</code>](#TranslationRequest)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>Object</code> | Options object - contains fields to update |\n| [opts.partner] | <code>String</code> | optional: update partner. |\n| [opts.name] | <code>String</code> | optional: update name |\n| [opts.targetLanguagesByBundle] | <code>Object.&lt;String, Array.&lt;String&gt;&gt;</code> | optional: update target bundle/language list |\n| [opts.emails] | <code>Array.&lt;String&gt;</code> | optional: update email list |\n| [opts.domains] | [<code>Array.&lt;TranslationDomain&gt;</code>](#TranslationDomain) | optional: update domain list |\n| [opts.status] | [<code>TranslationRequestStatus</code>](#TranslationRequestStatus) | optional: update TR status. May only change from `DRAFT` to `SUBMITTED` here. |\n| [opts.metadata] | <code>Object.&lt;String, String&gt;</code> | optional: update metadata |\n| cb | [<code>basicCallback</code>](#basicCallback) | callback with update status |\n\n<a name=\"TranslationRequest..getTranslationRequestsCallback\"></a>\n\n### TranslationRequest~getTranslationRequestsCallback : <code>function</code>\nCallback returned by trs()\n\n**Kind**: inner typedef of [<code>TranslationRequest</code>](#TranslationRequest)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>Object</code> | error, or null |\n| trs | <code>Object.&lt;string, TranslationRequest&gt;</code> | map from translation request ID to TranslationRequest Example: `{ 1dec633b: {…}}` if there was just one TR, id `1dec633b` |\n\n<a name=\"TranslationRequest..getTranslationRequestCallback\"></a>\n\n### TranslationRequest~getTranslationRequestCallback : <code>function</code>\nCallback returned by getInfo and create\n\n**Kind**: inner typedef of [<code>TranslationRequest</code>](#TranslationRequest)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>Object</code> | error, or null |\n| tr | [<code>TranslationRequest</code>](#TranslationRequest) | the returned TranslationRequest |\n\n<a name=\"User\"></a>\n\n## User\nGlobalization Pipeline user access object\n\n**Kind**: global class  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>String</code> | the userid |\n| updatedBy | <code>String</code> | gives information about which user updated this user last |\n| updatedAt | <code>Date</code> | the date when the item was updated |\n| type | <code>String</code> | `ADMINISTRATOR`, `TRANSLATOR`, or `READER` |\n| displayName | <code>String</code> | optional human friendly name |\n| metadata | <code>Object.&lt;string, string&gt;</code> | optional user-defined data |\n| serviceManaged | <code>Boolean</code> | if true, the GP service is managing this user |\n| password | <code>String</code> | user password |\n| comment | <code>String</code> | optional user comment |\n| externalId | <code>String</code> | optional User ID used by another system associated with this user |\n| bundles | <code>Array.&lt;string&gt;</code> | list of bundles managed by this user |\n\n\n* [User](#User)\n    * [new User(gp, props)](#new_User_new)\n    * _instance_\n        * [.update(opts, cb)](#User+update)\n        * [.delete([opts], cb)](#User+delete)\n        * [.getInfo(opts, cb)](#User+getInfo)\n    * _inner_\n        * [~getUserCallback](#User..getUserCallback) : <code>function</code>\n\n<a name=\"new_User_new\"></a>\n\n### new User(gp, props)\nNote: this constructor is not usually called directly, use Client.user(id)\n\n\n| Param | Type | Description |\n| --- | --- | --- |\n| gp | [<code>Client</code>](#Client) | parent Client object |\n| props | <code>Object</code> | properties to inherit |\n\n<a name=\"User+update\"></a>\n\n### user.update(opts, cb)\nUpdate this user. \nAll fields of opts are optional. For strings, falsy = no change, empty string `''` = deletion.\n\n**Kind**: instance method of [<code>User</code>](#User)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>object</code> | options |\n| opts.displayName | <code>string</code> | User's display name - falsy = no change, empty string `''` = deletion. |\n| opts.comment | <code>string</code> | optional comment - falsy = no change, empty string '' = deletion. |\n| opts.bundles | <code>Array.&lt;string&gt;</code> | Accessible bundle IDs. |\n| opts.metadata | <code>object.&lt;string, string&gt;</code> | User defined user metadata containg key/value pairs.  Data will be merged in. Pass in `{}` to erase all metadata. |\n| opts.externalId | <code>string</code> | User ID used by another system associated with this user - falsy = no change, empty string '' = deletion. |\n| cb | [<code>basicCallback</code>](#basicCallback) | callback with success or failure |\n\n<a name=\"User+delete\"></a>\n\n### user.delete([opts], cb)\nDelete this user. \nNote that the service managed user\n(the initial users created by the service) may not be\n deleted.\n\n**Kind**: instance method of [<code>User</code>](#User)  \n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| [opts] | <code>Object</code> | <code>{}</code> | options |\n| cb | [<code>basicCallback</code>](#basicCallback) |  | callback with success or failure |\n\n<a name=\"User+getInfo\"></a>\n\n### user.getInfo(opts, cb)\nFetch user info.\nThe callback is given a new User instance, with\nall properties filled in.\n\n**Kind**: instance method of [<code>User</code>](#User)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| opts | <code>Object</code> | optional, ignored |\n| cb | [<code>getUserCallback</code>](#User..getUserCallback) | called with updated info |\n\n<a name=\"User..getUserCallback\"></a>\n\n### User~getUserCallback : <code>function</code>\nCallback called by Client~createUser() and User~getInfo()\n\n**Kind**: inner typedef of [<code>User</code>](#User)  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>object</code> | error, or null |\n| user | [<code>User</code>](#User) | On success, the new or updated User object. |\n\n<a name=\"serviceRegex\"></a>\n\n## serviceRegex\na Regex for matching the service.\nUsage: `var credentials = require('cfEnv')\n     .getAppEnv().getServiceCreds(gp.serviceRegex);`\n(except that it needs to match by label)\n\n**Kind**: global variable  \n**Properties**\n\n| Name |\n| --- |\n| serviceRegex | \n\n<a name=\"exampleCredentials\"></a>\n\n## exampleCredentials\nExample credentials such as for documentation.\n\n**Kind**: global variable  \n**Properties**\n\n| Name |\n| --- |\n| exampleCredentials | \n\n<a name=\"exampleCredentialsString\"></a>\n\n## exampleCredentialsString\nExample credentials string\n\n**Kind**: global variable  \n**Properties**\n\n| Name |\n| --- |\n| exampleCredentialsString | \n\n<a name=\"version\"></a>\n\n## version\nCurrent version\n\n**Kind**: global variable  \n<a name=\"TranslationRequestStatus\"></a>\n\n## TranslationRequestStatus : <code>enum</code>\nPossible status values for Translation Requests\n\n**Kind**: global enum  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| DRAFT | <code>string</code> | The translation request has not been submitted for processing. It may modified or cancelled. |\n| SUBMITTED | <code>string</code> | The translation request has been submitted for processing, but has not been accepted by the partner yet. |\n| STARTED | <code>string</code> | Work has started on the translation request. |\n| TRANSLATED | <code>string</code> | All work has been completed on the translation request. It has not been merged into the target resource data yet. |\n| MERGED | <code>string</code> | The translation results have been merged into the original resource bundles. |\n\n<a name=\"TranslationDomain\"></a>\n\n## TranslationDomain : <code>enum</code>\nPossible translation domains. These provide hints as to the type of translation expected.\n\n**Kind**: global enum  \n**Properties**\n\n| Name | Type | Default |\n| --- | --- | --- |\n| AEROMIL | <code>string</code> | <code>&quot;Aerospace and the military-industrial complex&quot;</code> | \n| CNSTRCT | <code>string</code> | <code>&quot;Construction&quot;</code> | \n| GDSSVCS | <code>string</code> | <code>&quot;Goods and service&quot;</code> | \n| EDUCATN | <code>string</code> | <code>&quot;Education&quot;</code> | \n| FINSVCS | <code>string</code> | <code>&quot;Financial Services&quot;</code> | \n| GOVPUBL | <code>string</code> | <code>&quot;Government and public sector&quot;</code> | \n| HEALTHC | <code>string</code> | <code>&quot;Healthcare and social services&quot;</code> | \n| INDSTMF | <code>string</code> | <code>&quot;Industrial manufacturing&quot;</code> | \n| TELECOM | <code>string</code> | <code>&quot;Telecommunication&quot;</code> | \n| DMEDENT | <code>string</code> | <code>&quot;Digital media and entertainment&quot;</code> | \n| INFTECH | <code>string</code> | <code>&quot;Information technology&quot;</code> | \n| TRVLTRS | <code>string</code> | <code>&quot;Travel and transportation&quot;</code> | \n| INSURNC | <code>string</code> | <code>&quot;Insurance&quot;</code> | \n| ENGYUTL | <code>string</code> | <code>&quot;Energy and utilities&quot;</code> | \n| AGRICLT | <code>string</code> | <code>&quot;Agriculture&quot;</code> | \n\n<a name=\"getClient\"></a>\n\n## getClient(params) ⇒ [<code>Client</code>](#Client)\nConstruct a g11n-pipeline client. \nparams.credentials is required unless params.appEnv is supplied.\n\n**Kind**: global function  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| params | <code>Object</code> | configuration params |\n| params.appEnv | <code>Object</code> | pass the result of cfEnv.getAppEnv(). Ignored if params.credentials is supplied. |\n| params.credentials | <code>Object.&lt;string, string&gt;</code> | Bound credentials as from the CF service broker (overrides appEnv) |\n| params.credentials.url | <code>string</code> | service URL. (should end in '/translate') |\n| params.credentials.userId | <code>string</code> | service API key. |\n| params.credentials.password | <code>string</code> | service API key. |\n| params.credentials.instanceId | <code>string</code> | instance ID |\n\n<a name=\"ExternalService\"></a>\n\n## ExternalService : <code>Object</code>\ninfo about external services available\n\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>string</code> | The type of the service, such as MT for Machine Translation |\n| name | <code>string</code> | The name of the service |\n| id | <code>string</code> | The id of the service |\n| supportedTranslation | <code>Object.&lt;string, Array.&lt;string&gt;&gt;</code> | map from source language to array of target languages Example: `{ en: ['de', 'ja']}` meaning English translates to German and Japanese. |\n\n<a name=\"basicCallback\"></a>\n\n## basicCallback : <code>function</code>\nBasic Callback used throughout the SDK\n\n**Kind**: global typedef  \n\n| Param | Type | Description |\n| --- | --- | --- |\n| err | <code>Object</code> | error, or null |\n| data | <code>Object</code> | Returned data |\n\n<a name=\"WordCountsInfo\"></a>\n\n## WordCountsInfo : <code>object</code>\n**Kind**: global typedef  \n**Properties**\n\n| Name | Type | Description |\n| --- | --- | --- |\n| sourceLanguage | <code>string</code> | bcp47 id of the source language, such as 'en' |\n| counts | <code>object.&lt;string, number&gt;</code> | map from target language to word count |\n\n\n*docs autogenerated via [jsdoc2md](https://github.com/jsdoc2md/jsdoc-to-markdown)*\n\nCommunity\n===\n* View or file GitHub [Issues](https://github.com/IBM-Bluemix/gp-js-client/issues)\n* Connect with the open source community on [developerWorks Open](https://developer.ibm.com/open/ibm-bluemix-globalization-pipeline/node-js-sdk/)\n\nContributing\n===\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n\nLicense\n===\nApache 2.0. See [LICENSE.txt](LICENSE.txt)\n\n> Licensed under the Apache License, Version 2.0 (the \"License\");\n> you may not use this file except in compliance with the License.\n> You may obtain a copy of the License at\n> \n> http://www.apache.org/licenses/LICENSE-2.0\n> \n> Unless required by applicable law or agreed to in writing, software\n> distributed under the License is distributed on an \"AS IS\" BASIS,\n> WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n> See the License for the specific language governing permissions and\n> limitations under the License.\n"
}